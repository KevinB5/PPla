; Updates the duration of the shift to 6h if it is less than 6h
(defun less-than-6h (shift)
    (let ((aux shift)
          (duration (shiftDuration shift)))
            (if (< duration 360)
                (setf (shift-duration aux) 360)
            )
    aux)
)

; Função de que retorna a duração total do turno em inserido como argumento
(defun shiftDuration (shift)
  (let ((duration 0))
  (if (equal (list-length shift) 1)
    (setf duration (- (nth 3 (first shift)) (nth 2 (first shift))))
    (setf duration (- (nth 3 (nth (- (list-length shift) 1) shift)) (nth 2 (first shift))))
    )
    duration))

; ; Heurísticas

; Heurística que retorna a quantidade de turnos que contém o estado
(defun heuristic-shifts-quantity (state)
    (let ((auxState state)
          (quantity 0))
      (let((auxShifts (state-shifts auxState)))
        (setq quantity (list-length auxShifts))
    )quantity)

)

; Heurística que retorna a quantidade turnos que não iniciam na localização "L1"
(defun heuristic-shifts-notL1 (state)
    (let ((auxState state)
          (counter 0))
      (let((auxShifts (state-shifts auxState)))
        (loop for shift in auxShifts do
            (let ((start-location (nth 0(nth 0 (shift-tasks shift)))))
                (if (not (eql start-location (car '(L1))))
                    (setq counter (+ counter 1))

                )
            )
        )
    )counter)
)

; Heurística que retorna o tempo que sobrou do turno (em minutos)
(defun heuristic-remaining-shifts-time (state)
    (let ((auxState state)
          (total 0))
      (let((auxShifts (state-shifts auxState)))
        (loop for shift in auxShifts do
            (setq total (+ total (- 480 (shiftDuration shift))))
        )
    )total)
)

; Heurística que retorna o número de serviços inferior a 6h
(defun heuristic-shifts-less-than-6h (state)

    (let ((auxState state)
          (counter 0))
      (let((auxShifts (state-shifts auxState)))
        (loop for shift in auxShifts do
            (if (< 360 (shiftDuration shift))
                (setq counter (+ counter 1))
             )
        )
    )counter)
)