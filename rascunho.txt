; Função que verifica se uma tarefa com localidade não contínua é possível ser adicionada a um turno
(defun check-time-continuity-different (shift task)
	(if (not(equal nil task))
		(if (listp (nth 0 shift))
		  (let* ((waiting-time (- (nth 2 task) (nth 3 (nth (- (list-length shift) 1) shift))))
				  (actual-shift-time (shiftDuration shift))
				  (task-time (- (nth 3 task) (nth 2 task))))
				  (if (not (eql (first (first shift)) (car '(L1))))
							(setq actual-shift-time (+ actual-shift-time 40))
					)
				  (and (and (> waiting-time 0) (< (+ actual-shift-time task-time) 440))
					(or (and (> (+ actual-shift-time waiting-time) 240)
					   (> waiting-time 40))
						  (< (+ (+ (+ 80 actual-shift-time) task-time) waiting-time) 240)
				  )
			   )
			)
		   (let* ((waiting-time (- (nth 2 task) (nth 3 shift)))
				   (actual-shift-time (shiftDuration (list shift)))
				   (task-time (- (nth 3 task) (nth 2 task))))
				   (if (not (eql (first (first shift)) (car '(L1))))
							(setq actual-shift-time (+ actual-shift-time 40))
					)
				   (and  (and (> waiting-time 0) (< (+ actual-shift-time task-time) 440))
						(or (and (> (+ actual-shift-time waiting-time) 240)
							 (> waiting-time 40))
							(< (+ (+ (+ 80 actual-shift-time) task-time) waiting-time) 240)
						)
				   )
			)
		  )
	
	)
	(not t)
)

; Função que verifica se uma tarefa com localidade contínua é possível ser adicionada a um turno
(defun check-time-continuity-equal (shift task)
	(if (not(equal nil task))
		(if (listp (nth 0 shift))
		  (let* ((waiting-time (- (nth 2 task) (nth 3 (nth (- (list-length shift) 1) shift))))
				  (actual-shift-time (shiftDuration shift))
				  (task-time (- (nth 3 task) (nth 2 task))))
				  (if (not (eql (first (first shift)) (car '(L1))))
							(setq actual-shift-time (+ actual-shift-time 40))
					)
				  (and (and (> waiting-time 0) (< (+ actual-shift-time task-time) 480))
					(or (and (> (+ actual-shift-time waiting-time) 280)
					   (> waiting-time 40))
						  (< (+ (+ (+ 40 actual-shift-time) task-time) waiting-time) 240)
				  )
			   )
			)
		   (let* ((waiting-time (- (nth 2 task) (nth 3 shift)))
				   (actual-shift-time (shiftDuration (list shift)))
				   (task-time (- (nth 3 task) (nth 2 task))))
				   (if (not (eql (first (first shift)) (car '(L1))))
							(setq actual-shift-time (+ actual-shift-time 40))
					)
				   (and  (and (> waiting-time 0) (< (+ actual-shift-time task-time) 480))
						(or (and (> (+ actual-shift-time waiting-time) 280)
							 (> waiting-time 40))
							(< (+ (+ (+ 40 actual-shift-time) task-time) waiting-time) 240)
						)
				   )
				)
		)
		 
	)
	(not t)
)